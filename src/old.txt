import { SearchBotCommand } from './search-bot-command';
import { HelpBotCommand } from './help-bot-command';
import 'reflect-metadata';
import { BotCommandBase } from './bot-command';
import { GetCodeBotCommand } from './get-code-command';
import { BotCommandExecutor } from './bot-command-parser';


const declarations = [
    SearchBotCommand, GetCodeBotCommand, HelpBotCommand
]

interface IBotCommandRegistration {
    name: string;
    factory: Function;
    isDefault: boolean;
}

const components: IBotCommandRegistration[] = [];

for (const declaration in declarations) {
    if (declarations.hasOwnProperty(declaration)) {
        const command = declarations[declaration] as unknown as BotCommandBase;
        const factory = Reflect.getMetadata('factory', command);
        const name = Reflect.getMetadata('name', command);
        const isDefault = Reflect.getMetadata('isDefault', command);

        components.push({
            name, factory, isDefault
        })
    }
}

const args = "529288"
const name = "get code"

const command = components.find((command) => { return command.name === name || command.isDefault }).factory();

command.execute(args);





public get displayName() {
    let items = [];
    let target = (Object.getPrototypeOf(this));
    while( target != Object.prototype) {
        items.push(Reflect.getOwnMetadata('displayName', target));
        target = (Object.getPrototypeOf(target))
    }
    return items
}